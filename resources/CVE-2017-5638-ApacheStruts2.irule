when HTTP_REQUEST {
  set content_type [URI::decode [HTTP::header "Content-Type"]]
  set content_disposition [URI::decode [HTTP::header "Content-Disposition"]]
  
  if {(($content_type contains "$\{") || ($content_type contains "%\{") ||
      ($content_disposition contains "$\{") || ($content_disposition contains "%\{"))} {
    log local0. "Possible CVE-2017-5638 - Content-Type or Content-Disposition HTTP header contains OGNL phrasing from [IP::client_addr]"
    #Comment out the following two lines and uncomment the 'reject' to silently reject the connection
    HTTP::respond 403 content "<html><head><title>Invalid Request</title></head><body>HTTP Status 403: Invalid Request</body></html>"
    return
    #reject
  }
  
  #Check for more than one Content-Type Header for potential CVE 2017-5638 evasion
  #Check for more than one Content-Disposition Header for potential CVE 2017-5638 evasion
  set num_ct 0
  set num_cd 0

  foreach header_name [HTTP::header names] {
    set header_name_lower [string tolower $header_name]

    if { ( [URI::decode $header_name_lower] matches "content-type" ) } {
      incr num_ct
    }

    if { ( [URI::decode $header_name_lower] matches "content-disposition" ) } {
      incr num_cd
    }
  }
  
  if { ( $num_ct > 1 || $num_cd > 1 ) } {
    log local0. "Possible CVE 2017-5638 evasion - Request contains more than one Content-Type or Content-Disposition HTTP Request Header to host [HTTP::host] from [IP::client_addr]"
    #Comment out the following two lines and uncomment the 'reject' to silently reject the connection
    HTTP::respond 403 content "<html><head><title>Invalid Request</title></head><body>HTTP Status 403: Invalid Request</body></html>"
    return
    #reject
  }  

  STREAM::disable
  STREAM::expression {@[^\n]*Content-.*[:"][^\r\n\t\f]*[$%]{.*}["^\n]?@\x20@}
  #Alternative expression below matches only on the name= and filename= elements of the Content-Disposition header
  #Consider using this if you are more sensitive to potential false-positives for OGNL phrasing elsewhere
  #STREAM::expression {@[^\n]*[nN][aA][mM][eE][\x20\x09]*=[^\n]*[\x24\x25][\x20\x09\x00]*\x7b[^\n]*@\x20@}
  STREAM::enable
}

when STREAM_MATCHED {
  log local0. "Posible CVE-2017-5638 S2-046 - request contains OGNL phrasing after a Content-.* body directive from [IP::client_addr]: [STREAM::match]"
  reject
  # Earlier versions (prior to 11.0) of BIG-IP cannot reject or respond here, but the STREAM expression replaces the attack with a space (\x20)
}
